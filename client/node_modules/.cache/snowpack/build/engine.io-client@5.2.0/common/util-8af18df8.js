var globalThis_browser = (() => {
  if (typeof self !== "undefined") {
    return self;
  } else if (typeof window !== "undefined") {
    return window;
  } else {
    return Function("return this")();
  }
})();

var pick = (obj, ...attr) => {
  return attr.reduce((acc, k) => {
    if (obj.hasOwnProperty(k)) {
      acc[k] = obj[k];
    }
    return acc;
  }, {});
};

// Keep a reference to the real timeout functions so they can be used when overridden
const NATIVE_SET_TIMEOUT = setTimeout;
const NATIVE_CLEAR_TIMEOUT = clearTimeout;

var installTimerFunctions = (obj, opts) => {
  if (opts.useNativeTimers) {
    obj.setTimeoutFn = NATIVE_SET_TIMEOUT.bind(globalThis_browser);
    obj.clearTimeoutFn = NATIVE_CLEAR_TIMEOUT.bind(globalThis_browser);
  } else {
    obj.setTimeoutFn = setTimeout.bind(globalThis_browser);
    obj.clearTimeoutFn = clearTimeout.bind(globalThis_browser);
  }
};

var util = {
	pick: pick,
	installTimerFunctions: installTimerFunctions
};

export { globalThis_browser as g, installTimerFunctions as i, pick as p, util as u };
